---
interface Props {
    cols: number;
    rows: number;
    maxCols?: number;
    maxRows?: number;
    title?: string;
}

const {
    cols = 3,
    rows = 3,
    maxCols = Infinity,
    maxRows = Infinity,
    title = 'Basic Grid Demo',
} = Astro.props;

import { usePanlr } from '@packages/panlr';
const generator = usePanlr({
    cols,
    rows,
    maxPanelSize: { cols: maxCols, rows: maxRows },
});
const initialGrid = generator.toString();
---

<div class="demo-container p-6 bg-gray-800 rounded-lg shadow-lg">
    <h3 class="text-lg font-bold text-gray-100 mb-4 text-center">{title}</h3>
    <div
        class="grid-container bg-gray-900 p-4 rounded-md border border-gray-700"
        data-cols={cols}
        data-rows={rows}
        data-max-cols={maxCols}
        data-max-rows={maxRows}
    >
        <pre
            class="grid text-gray-200 bg-gray-800 p-4 rounded-md mb-4 font-mono text-sm leading-relaxed overflow-auto">{initialGrid.trim()}</pre>
        <div class="flex justify-center gap-4 mt-4">
            <button
                class="generate bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg shadow-md transition-transform transform hover:scale-105 font-medium"
            >
                Next Panel
            </button>
            <button
                class="reset bg-gray-700 hover:bg-gray-800 text-white px-6 py-2 rounded-lg shadow-md transition-transform transform hover:scale-105 font-medium"
            >
                Reset
            </button>
        </div>
    </div>
</div>

<script>
    // Will replace with package import
    import { usePanlr } from '@packages/panlr';

    const containers: HTMLElement[] = document.querySelectorAll(
        '.grid-container'
    ) as unknown as HTMLElement[];

    containers.forEach((container: HTMLElement) => {
        const config = {
            cols: Number(container.dataset.cols),
            rows: Number(container.dataset.rows),
            maxPanelSize: {
                cols: Number(container.dataset.maxCols),
                rows: Number(container.dataset.maxRows),
            },
        };
        console.log(config);

        // Will replace with:
        let generator = usePanlr({
            ...config,
        });

        const grid = container.querySelector('.grid');
        const generateBtn = container.querySelector('.generate');
        const resetBtn = container.querySelector('.reset');

        generateBtn?.addEventListener('click', () => {
            const state = generator.generateNext();
            console.log(state);
            if (grid) {
                grid.textContent = generator.toString();
            }
        });

        resetBtn?.addEventListener('click', () => {
            if (grid) {
                generator = usePanlr({
                    ...config,
                });
                grid.textContent = generator.toString();
            }
        });
    });
</script>
